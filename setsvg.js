const stripeWidth = 2.8; // originally 2.4, 6.6 makes nice fat stripes. 2.8 is nice too
const RED = "#EE0000";
const GREEN = "#1CA000";
const PURPLE = "#8400A0";

function draw_stuff( where, what, id ) {
	var strokeWidth = null; // each fill style gets its own
	var draw = SVG(where).size("100%","100%");
	
	if (typeof id !== 'undefined') {
	// the variable is defined
		draw.attr( "id", id );
	}

	draw.viewbox({ x: 0, y: 0, width: 300, height: 200 });

	// DRAW CARD BACKGROUND
	var square = draw.rect(300, 200).radius(15,15).attr({ fill: '#fff'}).stroke({color:'grey',width: '0.75%'});	
	square.attr( "id", id + "bg" );

	// TRANSLATE COLOR
	var color = what.substr(2,1);
	if( color == "r" ) {
		color = RED;
	}
	else if( color == "g" ) {
		color = GREEN;
	}
	else if( color == "p" ) {
		color = PURPLE;
	}

	// TRANSLATE SHADING
	var shading = what.substr(1,1);
	if( shading == "o" ) {
		shading = "none";
		strokeWidth = 4.7;
	}
	else if( shading == "s" ) {
		shading = color;
		strokeWidth = 0;
	}
	else if( shading == "t" ) {
		shading = draw.pattern(stripeWidth, 2*stripeWidth, function(add) {
			add.rect(stripeWidth,stripeWidth).fill(color);
		});
		strokeWidth = 4.2;
	}

	// TRANSLATE SHAPE
	var shape = what.substr(3,1);
	var path1 = null;
	var path2 = null;
	var offset = null;
	if( shape == "d" ) { // Diamonds - or Ts
		path1 = 'M150 26 L190 100 150 174 110 100 z';
		path2 = 'M106 26 L146 100 106 174 66 100 z';
		offset = 88;
	}
	else if( shape == "o" ) { // Ovals or Es
		path1 = 'M 114,55 C 124.75,17.75 173,17.50 184,55 184,55 184,143 184,143 176.75,182 122,182 114,143 114,143 114,55 114,55 Z';
		path2 = 'M 72,55 C 82.75,17.75 131,17.50 142,55 142,55 142,143 142,143 134.75,182 80,182 72,143 72,143 72,55 72,55 Z';
		offset = 84;
	}
	else if( shape == "s" ) {
		// original attempt at official squiggle
		path1 = 'M 114.67,44.33 C 114.52,34.53 127.63,32.65 133.06,31.70 138.50,30.75 161.62,33.62 172.07,42.80 179.23,49.53 182.28,58.26 181.26,69.38 180.25,80.50 173.54,93.15 171.00,105.44 168.03,116.79 168.47,129.46 174.84,139.63 178.18,145.91 184.75,151.75 185.64,158.04 186.53,164.34 176.35,168.72 170.02,170.31 156.71,173.50 142.76,167.52 133.85,157.58 122.74,145.63 118.76,128.02 122.77,112.31 125.41,99.88 131.34,87.75 129.98,74.77 127.89,63.26 114.82,54.13 114.67,44.33 Z';
		path2 = 'M 76.67,44.33 C 76.52,34.53 89.63,32.65 95.06,31.70 100.50,30.75 123.62,33.62 134.07,42.80 141.23,49.53 144.28,58.26 143.26,69.38 142.25,80.50 135.54,93.15 133.00,105.44 130.03,116.79 130.47,129.46 136.84,139.63 140.18,145.91 146.75,151.75 147.64,158.04 148.53,164.34 138.35,168.72 132.02,170.31 118.71,173.50 104.76,167.52 95.85,157.58 84.74,145.63 80.76,128.02 84.77,112.31 87.41,99.88 93.34,87.75 91.98,74.77 89.89,63.26 76.82,54.13 76.67,44.33 Z';
		// fat squig path1="M 135,28.43 C 131.46,28.96 128.43,29.2 125,30.36 105.35,37.02 120.92,55.98 126.68,67 128.24,69.98 129.98,73.55 129.35,77 128.58,81.3 123.76,86.41 121.16,90 117.24,95.4 115.23,99.6 113.43,106 104.07,139.17 125.62,169.05 160,171.68 167.8,172.27 182.09,169.84 184.42,161 187.32,149.98 169.9,133.06 170.52,124 170.84,119.33 175.42,114.67 178.08,111 182.64,104.72 185.26,99.54 187.10,92 193.74,64.81 178.92,36.92 151,30.13 145.98,28.91 140.14,27.91 135,28.43 Z";
		// fat squig path2="M 97,28.43 C 93.46,28.96 90.43,29.2 87,30.36 67.35,37.02 82.92,55.98 88.68,67 90.24,69.98 91.98,73.55 91.35,77 90.58,81.3 85.76,86.41 83.16,90 79.24,95.4 77.23,99.6 75.43,106 66.07,139.17 87.62,169.05 122,171.68 129.8,172.27 144.09,169.84 146.42,161 149.32,149.98 131.9,133.06 132.52,124 132.84,119.33 137.42,114.67 140.08,111 144.64,104.72 147.26,99.54 149.10,92 155.74,64.81 140.92,36.92 113,30.13 107.98,28.91 102.14,27.91 97,28.43 Z";
		// gd lightning bolts : these could be much more efficient and less ugly.
		// path1 = "M 188.25,76.45 C 188.25,76.45 165.54,110.73 165.54,110.73 165.54,110.73 188.67,101.91 188.67,101.91 188.67,101.91 164.52,133.17 164.52,133.17 164.52,133.17 175.38,131.06 175.38,131.06 175.07,133.18 156.88,152.23 156.88,152.23 156.88,152.23 163.59,154.98 163.59,154.98 163.59,154.98 135.73,180.89 135.73,180.89 135.73,180.89 138.26,142.63 138.26,142.63 138.26,142.63 123.01,149.80 123.01,149.80 123.01,149.80 133.53,123.50 133.53,123.50 133.53,123.50 113.13,133.48 113.13,133.48 113.13,133.48 134.97,94.99 134.97,94.99 134.97,94.99 112.13,105.57 112.13,105.57 112.13,105.57 140.33,67.62 140.33,67.62 140.33,67.62 120.08,71.67 120.08,71.67 120.08,71.67 142.80,45.85 142.80,45.85 142.80,45.85 133.21,48.70 133.21,48.70 133.21,48.70 158.61,19.26 158.61,19.26 158.61,19.26 158.47,45.08 158.47,45.08 158.47,45.08 179.40,34.16 179.40,34.16 179.40,34.16 161.95,61.58 161.95,61.58 161.95,61.58 181.91,54.13 181.91,54.13 181.91,54.13 162.85,87.89 162.85,87.89 162.85,87.89 188.25,76.45 188.25,76.45 Z";
		// path2 = "M 150.25,76.45 C 150.25,76.45 127.54,110.73 127.54,110.73 127.54,110.73 150.67,101.91 150.67,101.91 150.67,101.91 126.52,133.17 126.52,133.17 126.52,133.17 137.38,131.06 137.38,131.06 137.07,133.18 118.88,152.23 118.88,152.23 118.88,152.23 125.59,154.98 125.59,154.98 125.59,154.98 97.73,180.89 97.73,180.89 97.73,180.89 100.26,142.63 100.26,142.63 100.26,142.63 85.01,149.80 85.01,149.80 85.01,149.80 95.53,123.50 95.53,123.50 95.53,123.50 75.13,133.48 75.13,133.48 75.13,133.48 96.97,94.99 96.97,94.99 96.97,94.99 74.13,105.57 74.13,105.57 74.13,105.57 102.33,67.62 102.33,67.62 102.33,67.62 82.08,71.67 82.08,71.67 82.08,71.67 104.80,45.85 104.80,45.85 104.80,45.85 95.21,48.70 95.21,48.70 95.21,48.70 120.61,19.26 120.61,19.26 120.61,19.26 120.47,45.08 120.47,45.08 120.47,45.08 141.40,34.16 141.40,34.16 141.40,34.16 123.95,61.58 123.95,61.58 123.95,61.58 143.91,54.13 143.91,54.13 143.91,54.13 124.85,87.89 124.85,87.89 124.85,87.89 150.25,76.45 150.25,76.45 Z"
		
		// squig3
		//path1="M 118.66,41.97 C 120.89,54.64 136.53,61.55 135.67,82.33 135.30,91.14 127.90,100.96 125.45,109.07 121.39,122.46 119.48,138.48 124.28,151.90 130.96,170.57 150.45,177.21 166.25,173.86 171.46,172.76 178.88,170.97 181.16,164.61 185.82,151.66 169.27,143.90 167.00,128.00 164.34,109.41 178.45,102.91 178.67,81.67 178.89,59.05 171.54,40.22 152.88,30.41 142.06,24.73 120.00,23.30 118.66,41.97 Z";
		//path2="M 80.66,41.97 C 82.89,54.64 98.53,61.55 97.67,82.33 97.30,91.14 89.90,100.96 87.45,109.07 83.39,122.46 81.48,138.48 86.28,151.90 92.96,170.57 112.45,177.21 128.25,173.86 133.46,172.76 140.88,170.97 143.16,164.61 147.82,151.66 131.27,143.90 129.00,128.00 126.34,109.41 140.45,102.91 140.67,81.67 140.89,59.05 133.54,40.22 114.88,30.41 104.06,24.73 82.00,23.30 80.66,41.97 Z";

		offset = 76;
	}
	
	// HANDLE THE NUMBER WHEN YOU DRAW THE SHAPES HERE
	var num = what.substr(0,1);
	if( num == 1 || num == 3 ) {
		var polygon = draw.path( path1 ).fill( shading ).stroke({ color: color, linecap: 'round', width: strokeWidth });
		if( num == 3 ) {
			var use = draw.use( polygon ).move( offset, 0 );
			use = draw.use( polygon ).move( -offset, 0 );
		}
	}
	else {
		var polygon = draw.path( path2 ).fill( shading).stroke({ color: color, linecap: 'round', width: strokeWidth });
		var use = draw.use( polygon ).move( offset, 0 );
	}

}

